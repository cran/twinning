// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// twin_cpp
std::vector<std::size_t> twin_cpp(Rcpp::NumericMatrix& data, std::size_t r, std::size_t u1, std::size_t leaf_size);
RcppExport SEXP _twinning_twin_cpp(SEXP dataSEXP, SEXP rSEXP, SEXP u1SEXP, SEXP leaf_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type r(rSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< std::size_t >::type leaf_size(leaf_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(twin_cpp(data, r, u1, leaf_size));
    return rcpp_result_gen;
END_RCPP
}
// multipletS3_cpp
std::vector<std::size_t> multipletS3_cpp(Rcpp::NumericMatrix& data, std::size_t r, std::size_t u1, std::size_t leaf_size);
RcppExport SEXP _twinning_multipletS3_cpp(SEXP dataSEXP, SEXP rSEXP, SEXP u1SEXP, SEXP leaf_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type r(rSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< std::size_t >::type leaf_size(leaf_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(multipletS3_cpp(data, r, u1, leaf_size));
    return rcpp_result_gen;
END_RCPP
}
// energy_cpp
double energy_cpp(Rcpp::NumericMatrix& data, Rcpp::NumericMatrix& points);
RcppExport SEXP _twinning_energy_cpp(SEXP dataSEXP, SEXP pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type points(pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(energy_cpp(data, points));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_twinning_twin_cpp", (DL_FUNC) &_twinning_twin_cpp, 4},
    {"_twinning_multipletS3_cpp", (DL_FUNC) &_twinning_multipletS3_cpp, 4},
    {"_twinning_energy_cpp", (DL_FUNC) &_twinning_energy_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_twinning(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
